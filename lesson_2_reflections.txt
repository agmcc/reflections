What happens when you initialize a repository? Why do you need to do it?

	Creates .git folder- to get git to work...duh

How is the staging area different from the working directory and the repository? What value do you think it offers?
	Commit items in staging area - not wd (sa is bridge between wd and rep)
	hmmm not sure- try out commit arrangements before finalising?

How can you use the staging area to make sure you have one commit per logical change?

	Use git diff --staging which compares staging area and repo. check 1 change. or use git diff- make compare working dir and sa- check only 1 logical change in sa

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When trying out experimental features and still want a main version of the game to work on e.g. porting app for web or new language

How do the diagrams help you visualize the branch structure?

	See unreachable branches by looking at parents

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Changes from both merged.  Branch is merged into checked out branch e.g. if checkout master, calling git merge coins will merge coins with master. Master now contains coin commits.  can call git merge coins master or git merge master coins, same.  Not necessary even mention master as master is checked out. BUT if checkout easy-mode and call git merge master coins, then easy-mode, master and coins will all be merged. so ALWAYS checkout branch you want to merge into, THEN call git merge <branch to merge in>

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	auto = easy- good for simple changes e.g. removed or added a line
	Manual = for complex changes e.g. Origin A, Branch B, Branch C
	Want to merge C into B. Both C and B edited same line from A, so now 3 versions of line (A, B, C).  when Git tries to merge it will throw confict as doesn't know whether to use B or C version (or keep A).  Opens text editor- shows original (A), Head (current checked out branch- B) and branch to be merged (C). Can then work out what changes B and C made by comparing with A, and then decide whether to use B/C/Combo B+C

Name edit check